# ui/gui.py - VERS√ÉO CORRIGIDA COM TEMA APLICADO

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import os
import logging
from datetime import datetime
from database.models import DatabaseManager
from ui.gestao_empresas import abrir_gestao_empresas

# Imports seguros
try:
    from processing.processor import NFeProcessorBI
except ImportError:
    try:
        from processing.processor import NFeProcessor as NFeProcessorBI
    except ImportError:
        logging.error("M√≥dulo de processamento n√£o dispon√≠vel")
        NFeProcessorBI = None

def aplicar_tema(root):
    """Aplica tema azul, branco e preto"""
    
    style = ttk.Style(root)
    root.configure(bg="#0D1B2A")  # Fundo geral preto-azulado
    
    # Escolha o tema base
    style.theme_use("clam")
    
    # Configura√ß√µes de cores
    style.configure("TFrame", background="#1B263B")  # Azul escuro
    style.configure("TLabelframe", 
                   background="#1B263B", 
                   foreground="#E0E1DD",
                   borderwidth=2,
                   relief="groove")
    style.configure("TLabelframe.Label", 
                   background="#1B263B", 
                   foreground="#E0E1DD", 
                   font=("Arial", 11, "bold"))
    
    style.configure("TLabel", 
                   background="#1B263B", 
                   foreground="#E0E1DD", 
                   font=("Arial", 10))
    style.configure("Header.TLabel", 
                   background="#1B263B", 
                   foreground="#E0E1DD", 
                   font=("Arial", 18, "bold"))
    
    # Bot√µes com efeito hover
    style.configure("TButton",
                   background="#415A77",
                   foreground="#E0E1DD",
                   font=("Arial", 10, "bold"),
                   padding=8,
                   relief="raised")
    style.map("TButton",
              background=[("active", "#1F4287"), ("pressed", "#0F3460")],
              foreground=[("active", "#FFFFFF"), ("pressed", "#FFFFFF")],
              relief=[("pressed", "sunken"), ("active", "raised")])
    
    # Campos de entrada
    style.configure("TEntry", 
                   fieldbackground="#E0E1DD", 
                   foreground="#0D1B2A",
                   borderwidth=2,
                   relief="sunken")
    style.configure("TCombobox", 
                   fieldbackground="#E0E1DD", 
                   foreground="#0D1B2A",
                   arrowcolor="#415A77")
    
    # Scrollbars
    style.configure("Vertical.TScrollbar", 
                   background="#415A77", 
                   troughcolor="#1B263B", 
                   arrowcolor="#E0E1DD",
                   borderwidth=1)
    style.configure("Horizontal.TScrollbar", 
                   background="#415A77", 
                   troughcolor="#1B263B", 
                   arrowcolor="#E0E1DD",
                   borderwidth=1)
    
    # TreeView (para Dashboard)
    style.configure("Treeview",
                   background="#E0E1DD",
                   foreground="#0D1B2A",
                   fieldbackground="#E0E1DD",
                   font=("Arial", 9),
                   rowheight=25)
    style.configure("Treeview.Heading",
                   background="#415A77",
                   foreground="#E0E1DD",
                   font=("Arial", 10, "bold"),
                   relief="raised")
    style.map("Treeview",
              background=[("selected", "#1F4287")],
              foreground=[("selected", "#FFFFFF")])
    
    # Barra de progresso
    style.configure("TProgressbar", 
                   troughcolor="#1B263B", 
                   background="#1F4287", 
                   lightcolor="#4A90E2",
                   darkcolor="#1F4287",
                   borderwidth=1,
                   relief="sunken")

class AppGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ NFe Inspector - Business Intelligence")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # Vari√°veis de controle
        self.pasta_xml = tk.StringVar()
        self.pasta_saida = tk.StringVar()
        self.processing_thread = None
        
        self.setup_interface()
        
    def setup_interface(self):
        """Configura a interface principal"""
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo com estilo personalizado
        title_label = ttk.Label(main_frame, 
                               text="üöÄ NFe Inspector - Business Intelligence", 
                               style="Header.TLabel")
        title_label.pack(pady=(0, 25))
        
        # Frame para sele√ß√£o de pastas
        pastas_frame = ttk.LabelFrame(main_frame, text="üìÅ Configura√ß√µes de Pasta", padding="15")
        pastas_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Pasta XML
        ttk.Label(pastas_frame, text="Pasta com arquivos XML:").grid(row=0, column=0, sticky=tk.W, pady=8)
        ttk.Entry(pastas_frame, textvariable=self.pasta_xml, width=65).grid(row=0, column=1, padx=10, pady=8)
        ttk.Button(pastas_frame, text="üìÇ Selecionar", command=self.selecionar_pasta_xml).grid(row=0, column=2, pady=8)
        
        # Pasta Sa√≠da
        ttk.Label(pastas_frame, text="Pasta para relat√≥rios:").grid(row=1, column=0, sticky=tk.W, pady=8)
        ttk.Entry(pastas_frame, textvariable=self.pasta_saida, width=65).grid(row=1, column=1, padx=10, pady=8)
        ttk.Button(pastas_frame, text="üìÇ Selecionar", command=self.selecionar_pasta_saida).grid(row=1, column=2, pady=8)
        
        # Configurar grid
        pastas_frame.columnconfigure(1, weight=1)
        
        # Frame para bot√µes principais
        botoes_frame = ttk.LabelFrame(main_frame, text="üõ†Ô∏è A√ß√µes Dispon√≠veis", padding="15")
        botoes_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Container para bot√µes em grid
        botoes_container = ttk.Frame(botoes_frame)
        botoes_container.pack(expand=True)
        
        # Bot√µes principais em grid 2x2
        ttk.Button(botoes_container, text="üöÄ Processar XMLs",
                command=self.iniciar_processamento, width=20).grid(row=0, column=0, padx=8, pady=5)

        ttk.Button(botoes_container, text="üìä Dashboard BI",
                command=self.abrir_dashboard, width=20).grid(row=0, column=1, padx=8, pady=5)

        ttk.Button(botoes_container, text="üõ†Ô∏è Gest√£o Completa",
                command=self.abrir_gestao_completa,
                width=20).grid(row=0, column=2, padx=8, pady=5)

        ttk.Button(botoes_container, text="üîß Teste IA Fiscal",
                command=self.testar_ia, width=20).grid(row=1, column=0, padx=8, pady=5)

        ttk.Button(botoes_container, text="üìà Reforma Tribut√°ria",
                command=self.testar_reforma, width=20).grid(row=1, column=1, padx=8, pady=5)

        ttk.Button(botoes_container, text="‚ùì Ajuda",
                command=self.mostrar_ajuda, width=20).grid(row=1, column=2, padx=8, pady=5)
        
        # √Årea de log com estilo personalizado
        log_frame = ttk.LabelFrame(main_frame, text="üìã Log de Execu√ß√£o", padding="15")
        log_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Text widget com cores personalizadas
        self.log_text = tk.Text(log_frame, 
                               wrap=tk.WORD, 
                               state=tk.DISABLED,
                               bg="#E0E1DD",          # Fundo claro
                               fg="#0D1B2A",          # Texto escuro
                               insertbackground="#1F4287",  # Cursor
                               selectbackground="#415A77",   # Sele√ß√£o
                               selectforeground="#FFFFFF",   # Texto selecionado
                               font=("Consolas", 9),
                               relief="sunken",
                               borderwidth=2)
        
        scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Barra de progresso estilizada
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.pack(fill=tk.X, pady=(10, 5))
        
        # Status com cor
        self.status_label = ttk.Label(main_frame, text="‚úÖ Pronto para processar")
        self.status_label.pack(pady=(5, 0))
        
        # Log inicial
        self.log("üöÄ NFe Inspector iniciado com sucesso!")
        self.log("üí° Selecione as pastas e clique em 'Processar XMLs' para come√ßar")
    
    def mostrar_ajuda(self):
        """Exibe informa√ß√µes de ajuda sobre a interface."""
        messagebox.showinfo(
            "Ajuda - NFe Inspector",
            "üöÄ Processar XMLs: importa e analisa notas.\n"
            "üìä Dashboard BI: exibir√° filtros e gr√°ficos.\n"
            "üõ†Ô∏è Gest√£o Completa: CRUD de empresas.\n"
            "üîß Teste IA Fiscal: valida m√≥dulos de IA.\n"
            "üìà Reforma Tribut√°ria: valida m√≥dulos de reforma."
        )

    def log(self, mensagem):
        """Adiciona mensagem ao log com cores"""
        self.log_text.config(state=tk.NORMAL)
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Insere timestamp em cor diferente
        self.log_text.insert(tk.END, f"[{timestamp}] ", "timestamp")
        self.log_text.insert(tk.END, f"{mensagem}\n")
        
        # Configura tags de cor
        self.log_text.tag_config("timestamp", foreground="#415A77", font=("Consolas", 9, "bold"))
        
        # Auto scroll
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)
        self.root.update_idletasks()
        
    def selecionar_pasta_xml(self):
        """Seleciona pasta com arquivos XML"""
        pasta = filedialog.askdirectory(title="Selecione a pasta com arquivos XML")
        if pasta:
            self.pasta_xml.set(pasta)
            self.log(f"üìÅ Pasta XML selecionada: {pasta}")
            
    def selecionar_pasta_saida(self):
        """Seleciona pasta para relat√≥rios"""
        pasta = filedialog.askdirectory(title="Selecione a pasta para relat√≥rios")
        if pasta:
            self.pasta_saida.set(pasta)
            self.log(f"üìÅ Pasta de sa√≠da selecionada: {pasta}")
    
    def iniciar_processamento(self):
        """Inicia processamento em thread separada"""
        
        # Valida√ß√µes
        if not self.pasta_xml.get():
            messagebox.showwarning("Aviso", "Selecione a pasta com arquivos XML")
            return
            
        if not self.pasta_saida.get():
            messagebox.showwarning("Aviso", "Selecione a pasta para relat√≥rios")
            return
            
        if not os.path.exists(self.pasta_xml.get()):
            messagebox.showerror("Erro", "Pasta de XMLs n√£o existe")
            return
        
        # Verifica se processador est√° dispon√≠vel
        if NFeProcessorBI is None:
            messagebox.showerror("Erro",
                               "M√≥dulo de processamento n√£o dispon√≠vel.\n\n"
                               "Verifique se todos os m√≥dulos est√£o instalados corretamente.")
            return
        
        # Inicia thread de processamento
        self.processing_thread = threading.Thread(
            target=self.run_processing_thread, 
            daemon=True
        )
        self.processing_thread.start()
        
        # Atualiza interface
        self.progress.start()
        self.status_label.config(text="‚è≥ Processando...")
        
    def run_processing_thread(self):
        """Executa processamento em thread separada"""
        
        try:
            self.log("üöÄ Iniciando processamento de NFe...")
            
            # Criar inst√¢ncia do processador
            pasta_xml = self.pasta_xml.get()
            pasta_saida = self.pasta_saida.get()
            
            self.log(f"üìÅ Pasta XML: {pasta_xml}")
            self.log(f"üìÅ Pasta sa√≠da: {pasta_saida}")
            
            if NFeProcessorBI is None:
                raise Exception("M√≥dulo NFeProcessorBI n√£o est√° dispon√≠vel")
            
            self.log("‚öôÔ∏è Criando inst√¢ncia do processador...")
            processor_instance = NFeProcessorBI(pasta_xml, pasta_saida)
            
            if processor_instance is None:
                raise Exception("Falha ao criar inst√¢ncia do processador")
            
            self.log("‚úÖ Processador criado com sucesso")
            
            # Verifica arquivos XML
            xml_files = [f for f in os.listdir(pasta_xml) if f.lower().endswith('.xml')]
            if not xml_files:
                raise Exception(f"Nenhum arquivo XML encontrado em: {pasta_xml}")
            
            self.log(f"üìÑ Encontrados {len(xml_files)} arquivos XML")
            
            # Processa
            self.log("üîÑ Iniciando processamento...")
            
            if hasattr(processor_instance, 'processar_pasta'):
                estatisticas = processor_instance.processar_pasta()
            else:
                raise Exception("M√©todo 'processar_pasta' n√£o dispon√≠vel")
            
            # M√©todos de compatibilidade
            if hasattr(processor_instance, 'calcular_resumos'):
                self.log("üìä Calculando resumos...")
                processor_instance.calcular_resumos()
            
            if hasattr(processor_instance, 'gerar_relatorios'):
                self.log("üìë Gerando relat√≥rios...")
                processor_instance.gerar_relatorios()
            
            # Mostra estat√≠sticas
            if estatisticas:
                self.log("\n=== ‚úÖ PROCESSAMENTO CONCLU√çDO ===")
                for chave, valor in estatisticas.items():
                    self.log(f"‚Ä¢ {chave.replace('_', ' ').title()}: {valor}")
                    
                self.log(f"\nüíæ Dados salvos no banco de dados")
                self.log(f"üéØ Use o Dashboard BI para visualizar os resultados")
            
            # Atualiza interface
            self.root.after(0, self.processamento_concluido, True, "Processamento conclu√≠do com sucesso!")
            
        except Exception as e:
            error_msg = str(e)
            self.log(f"‚ùå ERRO: {error_msg}")
            logging.error(f"Erro no processamento: {error_msg}", exc_info=True)
            
            self.root.after(0, self.processamento_concluido, False, error_msg)
    
    def processamento_concluido(self, sucesso, mensagem):
        """Chamado quando processamento termina"""
        
        self.progress.stop()
        
        if sucesso:
            self.status_label.config(text="‚úÖ Processamento conclu√≠do")
            messagebox.showinfo("‚úÖ Sucesso", mensagem)
        else:
            self.status_label.config(text="‚ùå Erro no processamento")
            messagebox.showerror("‚ùå Erro", f"Erro no processamento:\n\n{mensagem}")
    
    def abrir_dashboard(self):
        """Abre Dashboard BI"""
        try:
            from database.models import DatabaseManager
            from ui.dashboard_nfe import DashboardNFe
            
            self.log("üöÄ Abrindo Dashboard BI...")
            
            db_manager = DatabaseManager()
            dashboard = DashboardNFe(self.root, db_manager)
            
            self.log("‚úÖ Dashboard BI aberto")
            
        except ImportError as e:
            error_msg = f"M√≥dulo de Dashboard BI n√£o dispon√≠vel: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showerror("Erro", error_msg)
        except Exception as e:
            error_msg = f"Erro ao abrir Dashboard BI: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showerror("Erro", error_msg)
    
    def testar_ia(self):
        """Testa m√≥dulos de IA"""
        try:
            from ia_fiscal.analisador_riscos import AnalisadorRiscos
            from ia_fiscal.detector_fraudes import DetectorFraudes
            
            self.log("üß† Testando m√≥dulos de IA...")
            
            nfe_teste = {
                'cnpj_emissor': '11222333000181',
                'valor_total': 50000.00,
                'data_emissao': '2025-09-13'
            }
            
            analisador = AnalisadorRiscos()
            detector = DetectorFraudes()
            
            risco = analisador.analisar_nfe(nfe_teste)
            inconsistencias = detector.detectar_inconsistencias(nfe_teste)
            
            self.log(f"‚úÖ Teste IA - Risco: {risco.nivel}, Score: {risco.score:.2f}")
            self.log(f"‚úÖ Teste IA - Inconsist√™ncias: {len(inconsistencias)}")
            
            messagebox.showinfo("‚úÖ Teste IA", "M√≥dulos de IA funcionando corretamente!")
            
        except ImportError as e:
            error_msg = f"M√≥dulos de IA n√£o dispon√≠veis: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showwarning("‚ö†Ô∏è Aviso", error_msg)
        except Exception as e:
            error_msg = f"Erro no teste de IA: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showerror("‚ùå Erro", error_msg)
    
    def testar_reforma(self):
        """Testa m√≥dulos da Reforma Tribut√°ria"""
        try:
            from reforma_tributaria.config import ConfigReformaTributaria
            from reforma_tributaria.calculadora import CalculadoraReformaTributaria
            
            self.log("üìä Testando Reforma Tribut√°ria...")
            
            config = ConfigReformaTributaria.get_config_por_ano(2025)
            calc = CalculadoraReformaTributaria(config)
            
            cbs = calc.calcular_cbs(1000.0, {})
            ibs = calc.calcular_ibs(1000.0, {})
            
            self.log(f"‚úÖ Teste Reforma - CBS: R$ {cbs['valor']:.2f}")
            self.log(f"‚úÖ Teste Reforma - IBS: R$ {ibs['valor']:.2f}")
            
            messagebox.showinfo("‚úÖ Teste Reforma", "M√≥dulos da Reforma Tribut√°ria funcionando!")
            
        except ImportError as e:
            error_msg = f"M√≥dulos da Reforma Tribut√°ria n√£o dispon√≠veis: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showwarning("‚ö†Ô∏è Aviso", error_msg)
        except Exception as e:
            error_msg = f"Erro no teste da Reforma: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showerror("‚ùå Erro", error_msg)

    def abrir_gestao_completa(self):
        """Abre janela de Gest√£o Completa de Empresas"""
        try:
            db_manager = DatabaseManager()
            abrir_gestao_empresas(self.root, db_manager)
        except Exception as e:
            logging.error(f"Erro ao abrir Gest√£o Completa: {e}")
            messagebox.showerror("Erro", f"Erro ao abrir Gest√£o Completa:\n{e}")
            
def iniciar_gui():
    """Fun√ß√£o principal para iniciar a GUI"""
    
    root = tk.Tk()
    
    # ‚úÖ APLICAR TEMA ANTES DE CRIAR A GUI
    aplicar_tema(root)
    
    app = AppGUI(root)
    root.mainloop()

if __name__ == "__main__":
    iniciar_gui()
